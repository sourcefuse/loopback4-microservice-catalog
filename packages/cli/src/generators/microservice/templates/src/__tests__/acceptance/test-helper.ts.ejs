import {<%= project.applicationName %>} from '../..';
import {
  createRestAppClient,
  givenHttpServerConfig,
  Client,
} from '@loopback/testlab';
<% if (project.facade) { -%>
import {RateLimitSecurityBindings} from 'loopback4-ratelimiter';
<% } -%>

export async function setupApplication(): Promise<AppWithClient> {
  const restConfig = givenHttpServerConfig({
    // Customize the server configuration here.
    // Empty values (undefined, '') will be ignored by the helper.
    //
    // host: process.env.HOST,
    // port: +process.env.PORT,
  });
  setUpEnv();

  const app = new <%= project.applicationName %>({
    rest: restConfig,
  });

  <% if(project.baseServiceDSList) { -%>
  <% for(let i=0; i< project.baseServiceDSList.length; i++) {-%>
    app.bind('datasources.config.<%= project.baseServiceDSList[i].fileName %>').to({
      name: '<%= project.baseServiceDSList[i].fileName %>',
      connector: 'memory',
    });
    <% } -%>
  <% } -%>


  <% if (project.facade || project.baseServiceCacheName) { -%>
    app.bind(`datasources.config.${process.env.REDIS_NAME}`).to({
      name: process.env.REDIS_NAME,
      connector: 'kv-memory',
    });
  <% } -%>

  <% if (project.facade) { -%>
    app.bind(RateLimitSecurityBindings.RATELIMIT_SECURITY_ACTION).to(async () => {
      /* nothing here */
    });
  <% } -%>

  await app.boot();
  await app.start();

  const client = createRestAppClient(app);

  return {app, client};
}

function setUpEnv() {
  process.env.NODE_ENV = 'test';
  process.env.ENABLE_TRACING = '0';
  process.env.ENABLE_OBF = '0';
  <% if (project.facade || project.baseServiceCacheName) { -%>
  process.env.REDIS_NAME = 'redis';
  <% } -%>
}

export interface AppWithClient {
  app: <%= project.applicationName %>;
  client: Client;
}

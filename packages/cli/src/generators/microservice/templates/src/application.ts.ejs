import {BootMixin} from '@loopback/boot';
import {ApplicationConfig} from '@loopback/core';
import {
  RestExplorerBindings,
  RestExplorerComponent,
} from '@loopback/rest-explorer';
import * as dotenv from 'dotenv';
import * as dotenvExt from 'dotenv-extended';

import {AuthenticationComponent} from 'loopback4-authentication';
import {
  AuthorizationBindings,
  AuthorizationComponent,
} from 'loopback4-authorization';
import {
  CoreComponent,
  ServiceSequence,
  SFCoreBindings,
  BearerVerifierBindings,
  BearerVerifierComponent,
  BearerVerifierConfig,
  BearerVerifierType,
  SECURITY_SCHEME_SPEC,
} from '@sourceloop/core';

<% if(project.serviceDependency === 'audit-service') { -%>
import {AuditServiceComponent} from '@sourceloop/audit-service';
<% } -%>
<% if(project.serviceDependency === 'authentication-service') { -%>
import {AuthenticationServiceComponent} from '@sourceloop/authentication-service';
<% } -%>
<% if(project.serviceDependency === 'chat-service') { -%>
import {ChatServiceComponent} from '@sourceloop/chat-service';
<% } -%>
<% if(project.serviceDependency === 'notification-service') { -%>
import {NotificationServiceComponent} from '@sourceloop/notification-service';
<% } -%>
<% if(project.serviceDependency === 'bpmn-service') { -%>
import {WorkflowServiceComponent} from '@sourceloop/bpmn-service';
<% } -%>
<% if(project.serviceDependency === 'feature-toggle-service') { -%>
import {FeatureToggleServiceComponent} from '@sourceloop/feature-toggle-service';
<% } -%>
<% if(project.serviceDependency === 'in-mail-service') { -%>
import {InMailServiceComponent} from '@sourceloop/in-mail-service';
<% } -%>
<% if(project.serviceDependency === 'payment-service') { -%>
import {PaymentServiceComponent} from '@sourceloop/payment-service';
<% } -%>
<% if(project.serviceDependency === 'scheduler-service') { -%>
import {SchedulerServiceComponent} from '@sourceloop/scheduler-service';
<% } -%>
<% if(project.serviceDependency === 'search-service') { -%>
import {SearchServiceComponent} from '@sourceloop/search-service';
<% } -%>
<% if(project.serviceDependency === 'video-conferencing-service') { -%>
import {VideoConfServiceComponent} from '@sourceloop/video-conferencing-service';
<% } -%>

<% if (project.repositories) { -%>
import {RepositoryMixin} from '@loopback/repository';
<% } -%>
import {RestApplication} from '@loopback/rest';
<% if (project.services) { -%>
import {ServiceMixin} from '@loopback/service-proxy';
<% } -%>
<% if (project.apiconnect) { -%>
import {
  ApiConnectBindings,
  ApiConnectComponent,
  ApiConnectSpecOptions,
} from '@loopback/apiconnect';
<% } -%>
import path from 'path';
import * as openapi from './openapi.json';

export {ApplicationConfig};

<% if (project.appClassWithMixins) { -%>
export class <%= project.applicationName %> extends BootMixin(
  <%= project.appClassWithMixins %>,
) {
<%
} else { // no optional mixins
-%>
export class <%= project.applicationName %> extends BootMixin(RestApplication) {
<% } -%>
  constructor(options: ApplicationConfig = {}) {
    const port = 3000;
    dotenv.config();
    dotenvExt.load({
      schema: '.env.example',
      errorOnMissing: process.env.NODE_ENV !== 'test',
      includeProcessEnv: true,
    });
    options.rest = options.rest ?? {};
    options.rest.basePath = process.env.BASE_PATH ?? '';
    options.rest.port = +(process.env.PORT ?? port);
    options.rest.host = process.env.HOST;
    options.rest.openApiSpec = {
      endpointMapping: {
        [`${options.rest.basePath}/openapi.json`]: {
          version: '3.0.0',
          format: 'json',
        },
      },
    };

    super(options);
    this.component(CoreComponent);

    // Set up the custom sequence
    this.sequence(ServiceSequence);

    // Add authentication component
    this.component(AuthenticationComponent);

<% if(project.serviceDependency === 'audit-service') { -%>
    this.component(AuditServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'authentication-service') { -%>
    this.component(AuthenticationServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'chat-service') { -%>
    this.component(ChatServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'notification-service') { -%>
    this.component(NotificationServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'bpmn-service') { -%>
    this.component(WorkflowServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'feature-toggle-service') { -%>
    this.component(FeatureToggleServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'in-mail-service') { -%>
    this.component(InMailServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'payment-service') { -%>
    this.component(PaymentServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'scheduler-service') { -%>
    this.component(SchedulerServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'search-service') { -%>
    this.component(SearchServiceComponent);
<% } -%>
<% if(project.serviceDependency === 'video-conferencing-service') { -%>
    this.component(VideoConfServiceComponent);
<% } -%>

    // To check if monitoring is enabled from env or not
    const enableObf = !!+(process.env.ENABLE_OBF ?? 0);
    // To check if authorization is enabled for swagger stats or not
    const authentication =
      process.env.SWAGGER_USER && process.env.SWAGGER_PASSWORD ? true : false;
    this.bind(SFCoreBindings.config).to({
      enableObf,
      obfPath: process.env.OBF_PATH ?? '/obf',
      openapiSpec: openapi,
      authentication: authentication,
      swaggerUsername: process.env.SWAGGER_USER,
      swaggerPassword: process.env.SWAGGER_PASSWORD,
    });

    // Add bearer verifier component
    this.bind(BearerVerifierBindings.Config).to({
<% if(!project.facade) { -%>
      type: BearerVerifierType.service,
<% } -%>
<% if(project.facade) { -%>
      type: BearerVerifierType.facade,
<% } -%>
    } as BearerVerifierConfig);
    this.component(BearerVerifierComponent);
    // Add authorization component
    this.bind(AuthorizationBindings.CONFIG).to({
      allowAlwaysPaths: ['/explorer', '/openapi.json'],
    });
    this.component(AuthorizationComponent);

    // Set up default home page
    this.static('/', path.join(__dirname, '../public'));

    // Customize @loopback/rest-explorer configuration here
    this.configure(RestExplorerBindings.COMPONENT).to({
      path: '/explorer',
    });

    this.component(RestExplorerComponent);

<%_ if (project.apiconnect) { -%>
    this.component(ApiConnectComponent);
    const apiConnectOptions: ApiConnectSpecOptions = {
      targetUrl: 'http://localhost:3000/',
    };
    this.configure(ApiConnectBindings.API_CONNECT_SPEC_ENHANCER).to(
      apiConnectOptions,
    );
<%_ } -%>

    this.projectRoot = __dirname;
    // Customize @loopback/boot Booter Conventions here
    this.bootOptions = {
      controllers: {
        // Customize ControllerBooter Conventions here
        dirs: ['controllers'],
        extensions: ['.controller.js'],
        nested: true,
      },
    };

    this.api({
      openapi: '3.0.0',
      info: {
        title: '<%= project.name %>',
        version: '1.0.0',
      },
      paths: {},
      components: {
        securitySchemes: SECURITY_SCHEME_SPEC,
      },
      servers: [{url: '/'}],
    });
  }
}

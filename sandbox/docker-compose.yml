version: "3.4"

x-auth-variables: &auth-variables
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: authentication_db
      DB_SCHEMA: main
      JWT_SECRET: i_am_a_strong_secret
      JWT_ISSUER: https://loopback4-microservice-catalog
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL:
      REDIS_PASSWORD:
      REDIS_DATABASE: 0
      USER_TEMP_PASSWORD: tempP@ssw0rd
      GOOGLE_AUTH_URL:
      GOOGLE_AUTH_CLIENT_ID:
      GOOGLE_AUTH_CLIENT_SECRET:
      GOOGLE_AUTH_TOKEN_URL:
      GOOGLE_AUTH_CALLBACK_URL:
      LOCALE: en
      FORGOT_PASSWORD_LINK_EXPIRY:
      KEYCLOAK_HOST: test
      KEYCLOAK_REALM: test
      KEYCLOAK_CLIENT_ID: test
      KEYCLOAK_CLIENT_SECRET: test
      KEYCLOAK_CALLBACK_URL: test
      RATE_LIMITER_WINDOW_MS: 100
      RATE_LIMITER_MAX_REQS: 100
      X_FRAME_OPTIONS: SAMEORIGIN

x-workflow-variables: &workflow-variables
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: workflow_db
      DB_SCHEMA: main
      CAMUNDA_URL: http://camunda:8080/engine-rest

x-audit-variables: &audit-variables
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: audit_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL:
      REDIS_PASSWORD:
      REDIS_DATABASE: 0
      JWT_SECRET: i_am_a_strong_secret
      JWT_ISSUER: https://loopback4-microservice-catalog

x-scheduler-variables: &scheduler-variables
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: scheduler_db
      DB_SCHEMA: main
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL:
      REDIS_PASSWORD:
      REDIS_DATABASE: 0
      JWT_SECRET: i_am_a_strong_secret
      JWT_ISSUER: https://loopback4-microservice-catalog


services:
  auth-multitenant-example:
    image: sourceloop/auth-multitenant-example
    build:
      context: ./auth-multitenant-example
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - sandbox
    environment: *auth-variables
    depends_on:
      - postgres
      - redis
      - postgres_orchestrator
      - auth-multitenant-migration

  auth-multitenant-migration:
    image: sourceloop/auth-multitenant-example:latest
    command: ["npm", "run", "db:migrate"]
    environment: *auth-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  notification-socket-example:
    image: sourceloop/notification-socket-example
    build:
      context: ./notification-socket-example
      dockerfile: Dockerfile
    ports:
      - "3030:3000"
    networks:
      - sandbox
    environment:
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: notification_db
      DB_SCHEMA: public
      JWT_SECRET: i_am_a_strong_secret
      JWT_ISSUER: https://loopback4-microservice-catalog
    depends_on:
      - postgres

  workflow-ms-example:
    image: sourceloop/workflow-ms-example
    build:
      context: ./workflow-ms-example
      dockerfile: Dockerfile
      args:
          - WORKFLOW_MIGRATION_SKIP=true
    ports:
      - "3031:3000"
    networks:
      - sandbox
    environment: *workflow-variables
    depends_on:
      - postgres
      - camunda
      - postgres_orchestrator
      - workflow-migration

  workflow-migration:
    image: sourceloop/workflow-ms-example:latest
    command: ["npm", "run", "db:migrate"]
    environment: *workflow-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure
    
  audit-ms-example:
    image: sourceloop/audit-ms-example
    build:
      context: ./audit-ms-example
      dockerfile: Dockerfile
    ports:
      - "3032:3000"
    networks:
      - sandbox
    environment: *audit-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - audit-ms-migration
    
  audit-ms-migration:
    image: sourceloop/audit-ms-example:latest
    command: ["npm", "run", "db:migrate"]
    environment: *audit-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure 

  scheduler-example:
    image: sourceloop/scheduler-example
    build:
      context: ./scheduler-example
      dockerfile: Dockerfile
    ports:
      - "3034:3000"
    networks:
      - sandbox
    environment: *scheduler-variables
    depends_on:
      - postgres
      - postgres_orchestrator
  

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - sandbox

  camunda:
    container_name: camunda_engine
    image: camunda/camunda-bpm-platform:run-latest
    ports:
      - "8080:8080"
    networks:
      - sandbox
    restart: unless-stopped

  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - sandbox
    restart: unless-stopped

  postgres_orchestrator:
    container_name: postgres_orchestrator
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
      PGPASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "5433:5433"
    networks:
      - sandbox
    depends_on:
      - postgres
    command: >
      bash -c "export PGPASSWORD=${POSTGRES_PASSWORD:-changeme} &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database authentication_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database notification_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database workflow_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database audit_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database scheduler_db'"


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - sandbox
    restart: unless-stopped

networks:
  sandbox:
    driver: bridge

volumes:
  postgres:
  pgadmin:
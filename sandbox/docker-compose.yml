version: '3.4'

x-auth-variables: &auth-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: authentication_db
  DB_SCHEMA: main
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD:
  REDIS_DB: 0
  USER_TEMP_PASSWORD: tempP@ssw0rd
  GOOGLE_AUTH_URL:
  GOOGLE_AUTH_CLIENT_ID:
  GOOGLE_AUTH_CLIENT_SECRET:
  GOOGLE_AUTH_TOKEN_URL:
  GOOGLE_AUTH_CALLBACK_URL:
  LOCALE: en
  FORGOT_PASSWORD_LINK_EXPIRY:
  KEYCLOAK_HOST: test
  KEYCLOAK_REALM: test
  KEYCLOAK_CLIENT_ID: test
  KEYCLOAK_CLIENT_SECRET: test
  KEYCLOAK_CALLBACK_URL: test
  RATE_LIMITER_WINDOW_MS: 100
  RATE_LIMITER_MAX_REQS: 100
  X_FRAME_OPTIONS: SAMEORIGIN

x-workflow-variables: &workflow-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: workflow_db
  DB_SCHEMA: main
  CAMUNDA_URL: http://camunda:8080/engine-rest

x-audit-variables: &audit-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: audit_db
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD: test
  REDIS_DB: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-pubnub-variables: &pubnub-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: pubnub_db
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD:
  REDIS_DB: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-feature-toggle-variables: &feature-toggle-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: feature_toggle_db
  JWT_SECRET: i_am_a_strong_secret
  REDIS_PASSWORD:
  REDIS_DATABASE: 0
  JWT_ISSUER: https://loopback4-microservice-catalog

x-scheduler-variables: &scheduler-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: scheduler_db
  DB_SCHEMA: main
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD:
  REDIS_DATABASE: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-video-variables: &video-variables
  VONAGE_API_KEY: 0
  VONAGE_API_SECRET: abc
  TIME_TO_START: 10
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: video_db
  DB_SCHEMA: main
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-in-mail-variables: &in-mail-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: in_mail_db
  DB_SCHEMA: main
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD:
  REDIS_DATABASE: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-payment-backend-variables: &payment-backend-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: payment_db
  DB_SCHEMA: main
  SUCCESS_CALLBACK_URL: http://localhost:3000
  FAILURE_CALLBACK_URL: http://localhost:3000
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-search-ms-variables: &search-ms-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: search_db
  DB_SCHEMA: main

x-chat-notif-facade-variables: &chat-notif-facade-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  NOTIF_SERVICE_URL: http://localhost:3052
  CHAT_SERVICE_URL: http://localhost:3051
  AUTH_DB_HOST: redis
  AUTH_DB_PORT: 6379
  AUTH_DB_PASSWORD:
  AUTH_DB_DATABASE: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-chat-notif-facade-chat-variables: &chat-notif-facade-chat-variables
  NODE_ENV: dev
  LOG_LEVEL: info
  CHAT_DB_HOST: postgres
  CHAT_DB_PORT: 5432
  CHAT_DB_USER: ${POSTGRES_USER:-postgres}
  CHAT_DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  CHAT_DB_DATABASE: chat_db
  CHAT_DB_SCHEMA: main
  AUTHCACHE_DB_HOST: redis
  AUTHCACHE_DB_PORT: 6379
  AUTHCACHE_DB_PASSWORD:
  AUTHCACHE_DB_DATABASE: 0
  REDIS_PASSWORD:
  REDIS_DATABASE: 0
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-chat-notif-facade-notif-variables: &chat-notif-facade-notif-variables
  NODE_ENV: dev
  LOG_LEVEL: info
  NOTIF_DB_HOST: postgres
  NOTIF_DB_PORT: 5432
  NOTIF_DB_USER: ${POSTGRES_USER:-postgres}
  NOTIF_DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  NOTIF_DB_DATABASE: notifdb
  AUTHCACHE_DB_HOST: redis
  AUTHCACHE_DB_PORT: 6379
  AUTHCACHE_DB_PASSWORD:
  AUTHCACHE_DB_DATABASE: 0
  NOTIFCACHE_DB_HOST: redis
  NOTIFCACHE_DB_PORT: 6379
  NOTIFCACHE_DB_PASSWORD:
  NOTIFCACHE_DB_DATABASE: 0
  PUBNUB_SUBSCRIBE_KEY: sub-c-795ac30a-1d26-11ec-ad6d-3eee4c94e219
  PUBNUB_PUBLISH_KEY: pub-c-64a4aaf2-20d5-481a-b4d5-15b06b441883
  UUID: 381f84ff-d68d-1997-5d8a-bb4c09165219
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog

x-cache-variables: &cache-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: cache_db
  DB_SCHEMA: main
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_DATABASE: 0
  REDIS_PASS:

x-user-tenant-variables: &user-tenant-variables
  NODE_ENV: dev
  LOG_LEVEL: debug
  DB_HOST: postgres
  DB_PORT: 5432
  DB_USER: ${POSTGRES_USER:-postgres}
  DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  DB_DATABASE: authentication_db
  DB_SCHEMA: main
  JWT_SECRET: i_am_a_strong_secret
  JWT_ISSUER: https://loopback4-microservice-catalog
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_URL:
  REDIS_PASSWORD:
  REDIS_DB: 0
  USER_TEMP_PASSWORD: tempP@ssw0rd
  SUCCESS_CALLBACK_URL: http://localhost:3000
  FAILURE_CALLBACK_URL: http://localhost:3000
services:
  chat-notification-pubnub-example:
    image: ${REGISTRY:-localhost:32000}/chat-notification-pubnub-example
    build:
      context: ./chat-notification-pubnub-example/facade
      dockerfile: Dockerfile
    ports:
      - '3050:3000'
    networks:
      - sandbox
    environment: *chat-notif-facade-variables
    depends_on:
      - postgres
      - redis
      - postgres_orchestrator
      - facade-chat-service
      - facade-notification-service
    restart: on-failure

  facade-chat-service:
    image: ${REGISTRY:-localhost:32000}/facade-chat-service
    build:
      context: ./chat-notification-pubnub-example/services/chat-service
      dockerfile: Dockerfile
    ports:
      - '3051:3000'
    networks:
      - sandbox
    environment: *chat-notif-facade-chat-variables
    depends_on:
      - postgres
      - redis
      - postgres_orchestrator
      - facade-chat-migration
    restart: on-failure

  facade-chat-migration:
    image: ${REGISTRY:-localhost:32000}/facade-chat-service
    build:
      context: ./chat-notification-pubnub-example/services/chat-service
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *chat-notif-facade-chat-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  facade-notification-service:
    image: ${REGISTRY:-localhost:32000}/facade-notification-service
    build:
      context: ./chat-notification-pubnub-example/services/notifications-service
      dockerfile: Dockerfile
    ports:
      - '3052:3000'
    networks:
      - sandbox
    environment: *chat-notif-facade-notif-variables
    depends_on:
      - postgres
      - redis
      - postgres_orchestrator
      - facade-notification-migration
    restart: on-failure

  facade-notification-migration:
    image: ${REGISTRY:-localhost:32000}/facade-notification-service
    build:
      context: ./chat-notification-pubnub-example/services/notifications-service
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *chat-notif-facade-notif-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  auth-multitenant-example:
    image: ${REGISTRY:-localhost:32000}/auth-multitenant-example
    build:
      context: ./auth-multitenant-example
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    networks:
      - sandbox
    environment: *auth-variables
    depends_on:
      - postgres
      - redis
      - postgres_orchestrator
      - auth-multitenant-migration
    restart: on-failure

  auth-multitenant-migration:
    image: ${REGISTRY:-localhost:32000}/auth-multitenant-example
    build:
      context: ./auth-multitenant-example
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *auth-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  notification-socket-example:
    image: ${REGISTRY:-localhost:32000}/notification-socket-example
    build:
      context: ./notification-socket-example
      dockerfile: Dockerfile
    ports:
      - '3030:3000'
    networks:
      - sandbox
    environment:
      NODE_ENV: dev
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_DATABASE: notification_db
      DB_SCHEMA: public
      JWT_SECRET: i_am_a_strong_secret
      JWT_ISSUER: https://loopback4-microservice-catalog
    depends_on:
      - postgres

  workflow-ms-example:
    image: ${REGISTRY:-localhost:32000}/workflow-ms-example
    build:
      context: ./workflow-ms-example
      dockerfile: Dockerfile
      args:
        - WORKFLOW_MIGRATION_SKIP=true
    ports:
      - '3031:3000'
    networks:
      - sandbox
    environment: *workflow-variables
    depends_on:
      - postgres
      - camunda
      - postgres_orchestrator
      - workflow-migration
    restart: on-failure

  workflow-migration:
    image: ${REGISTRY:-localhost:32000}/workflow-ms-example
    build:
      context: ./workflow-ms-example
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *workflow-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  audit-ms-example:
    image: ${REGISTRY:-localhost:32000}/audit-ms-example
    build:
      context: ./audit-ms-example
      dockerfile: Dockerfile
    ports:
      - '3032:3000'
    networks:
      - sandbox
    environment: *audit-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - audit-ms-migration
    restart: on-failure

  search-ms-example:
    image: ${REGISTRY:-localhost:32000}/search-ms-example
    build:
      context: ./search-ms-example
      dockerfile: Dockerfile
    ports:
      - '3037:3000'
    networks:
      - sandbox
    environment: *search-ms-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - search-ms-migration
    restart: on-failure

  search-ms-migration:
    image: ${REGISTRY:-localhost:32000}/search-ms-example
    command: sh -c "sleep 60 && npm run db:migrate"
    build:
      context: ./search-ms-example
      dockerfile: Dockerfile
    environment: *search-ms-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  search-client-example:
    image: ${REGISTRY:-localhost:32000}/search-client-example
    build:
      context: ./search-client-example
      dockerfile: Dockerfile
    ports:
      - '4200:4200'
    networks:
      - sandbox
    restart: on-failure

  user-onboarding-example:
    image: ${REGISTRY:-localhost:32000}/user-onboarding-example
    build:
      context: ./user-onboarding-example
      dockerfile: Dockerfile
    ports:
      - '4201:4200'
    networks:
      - sandbox
    restart: on-failure

  audit-ms-migration:
    image: ${REGISTRY:-localhost:32000}/audit-ms-example
    command: sh -c "sleep 60 && npm run db:migrate"
    build:
      context: ./audit-ms-example
      dockerfile: Dockerfile
    environment: *audit-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  pubnub-example:
    image: ${REGISTRY:-localhost:32000}/pubnub-example
    build:
      context: ./pubnub-example
      dockerfile: Dockerfile
    ports:
      - '3036:3000'
    networks:
      - sandbox
    environment: *pubnub-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - pubnub-migration
    restart: on-failure

  pubnub-migration:
    image: ${REGISTRY:-localhost:32000}/pubnub-example:latest
    command: sh -c "sleep 60 && npm run db:migrate"
    build:
      context: ./pubnub-example
      dockerfile: Dockerfile
    environment: *pubnub-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  feature-toggle-example:
    image: ${REGISTRY:-localhost:32000}/feature-toggle-example
    build:
      context: ./feature-toggle-example
      dockerfile: Dockerfile
    ports:
      - '3039:3000'
    networks:
      - sandbox
    environment: *feature-toggle-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - feature-toggle-migration
    restart: on-failure

  feature-toggle-migration:
    image: ${REGISTRY:-localhost:32000}/feature-toggle:latest
    command: sh -c "sleep 60 && npm run db:migrate"
    build:
      context: ./feature-toggle-example
      dockerfile: Dockerfile
    environment: *feature-toggle-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  scheduler-example:
    image: ${REGISTRY:-localhost:32000}/scheduler-example
    build:
      context: ./scheduler-example
      dockerfile: Dockerfile
    ports:
      - '3034:3000'
    networks:
      - sandbox
    environment: *scheduler-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    restart: on-failure

  video-conferencing-ms-example:
    image: ${REGISTRY:-localhost:32000}/video-conferencing-ms-example
    build:
      context: ./video-conferencing-ms-example
      dockerfile: Dockerfile
    ports:
      - '3040:3000'
    networks:
      - sandbox
    environment: *video-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    restart: on-failure

  video-conferencing-ms-migration:
    image: ${REGISTRY:-localhost:32000}/video-conferencing-ms-example
    build:
      context: ./video-conferencing-ms-example
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *video-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  in-mail-example:
    image: ${REGISTRY:-localhost:32000}/in-mail-example
    build:
      context: ./in-mail-example
      dockerfile: Dockerfile
    ports:
      - '3033:3000'
    networks:
      - sandbox
    environment: *in-mail-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    restart: on-failure

  payment-backend-example:
    image: ${REGISTRY:-localhost:32000}/payment-example/backend
    build:
      context: ./payment-example/backend
      dockerfile: Dockerfile
    ports:
      - '3042:3000'
    networks:
      - sandbox
    environment: *payment-backend-variables
    depends_on:
      - postgres
      - postgres_orchestrator
      - payment-backend-migration
    restart: on-failure

  payment-backend-migration:
    image: ${REGISTRY:-localhost:32000}/payment-example/backend
    build:
      context: ./payment-example/backend
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *payment-backend-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  cache-example:
    image: ${REGISTRY:-localhost:32000}/cache-example
    build:
      context: ./cache-example
      dockerfile: Dockerfile
    ports:
      - '3041:3000'
    networks:
      - sandbox
    environment: *cache-variables
    depends_on:
      - cache-migration
      - postgres
      - redis
      - postgres_orchestrator
    restart: on-failure

  cache-migration:
    image: ${REGISTRY:-localhost:32000}/cache-example
    build:
      context: ./cache-example
      dockerfile: Dockerfile
    command: sh -c "sleep 60 && npm run db:migrate"
    environment: *cache-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    networks:
      - sandbox
    restart: on-failure

  user-tenant-example:
    image: ${REGISTRY:-localhost:32000}/user-tenant-example
    build:
      context: ./user-tenant-example
      dockerfile: Dockerfile
    ports:
      - '3043:3000'
    networks:
      - sandbox
    environment: *user-tenant-variables
    depends_on:
      - postgres
      - postgres_orchestrator
    restart: on-failure

  redis:
    image: 'redis:alpine'
    ports:
      - '6379:6379'
    networks:
      - sandbox

  camunda:
    container_name: camunda_engine
    image: camunda/camunda-bpm-platform:run-latest
    ports:
      - '8080:8080'
    networks:
      - sandbox
    restart: always

  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - '5432:5432'
    networks:
      - sandbox
    restart: always

  postgres_orchestrator:
    container_name: postgres_orchestrator
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
      PGPASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - '5433:5433'
    networks:
      - sandbox
    depends_on:
      - postgres
    command: >
      bash -c "export PGPASSWORD=${POSTGRES_PASSWORD:-changeme} && sleep 30 &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database authentication_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database notification_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database workflow_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database audit_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database pubnub_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database feature_toggle_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database scheduler_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database in_mail_db'&&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database search_db'&&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database video_db'&&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database chat_notif_facade_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database chat_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database payment_db' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database notifdb' &&
               psql -U ${POSTGRES_USER:-postgres} -d postgres -h postgres -c 'create database cache_db'"

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    networks:
      - sandbox
    restart: always

networks:
  sandbox:
    driver: bridge

volumes:
  postgres:
  pgadmin:

'use strict';
Object.defineProperty(exports, '__esModule', {value: true});
const cdktf_1 = require('cdktf');
const dotenv = require('dotenv');
const dotenvExt = require('dotenv-extended');
const path_1 = require('path');
const common_1 = require('./common');
dotenv.config();
dotenvExt.load({
  schema: '.env.example',
  errorOnMissing: true,
  includeProcessEnv: true,
});
const app = new cdktf_1.App();
const getSubnetIds = () => {
  let _a;
  try {
    const subnetIds =
      ((_a = process.env) === null || _a === void 0 ? void 0 : _a.SUBNET_IDS) ||
      '';
    return JSON.parse(subnetIds);
  } catch (e) {
    console.error(e); // NOSONAR
  }
  return [];
};
const getSecurityGroup = () => {
 let _a;
  try {
    const securityGroup =
      ((_a = process.env) === null || _a === void 0
        ? void 0
        : _a.SECURITY_GROUPS) || '';
    return JSON.parse(securityGroup);
  } catch (e) {
    console.error(e); // NOSONAR
  }
  return [];
};
// sonarignore:start
new common_1.MigrationStack(app, 'migration', {
  // sonarignore:end
  codePath: (0, path_1.resolve)(__dirname, '../migration'),
  handler: 'lambda.handler',
  runtime: 'nodejs18.x',
  vpcConfig: {
    securityGroupIds: getSecurityGroup(),
    subnetIds: getSubnetIds(),
  },
  memorySize: 256,
  invocationData: '{}',
  timeout: 60,
  envVars: {
    DB_HOST: process.env.DB_HOST || '',
    DB_PORT: process.env.DB_PORT || '',
    DB_USER: process.env.DB_USER || '',
    DB_PASSWORD: process.env.DB_PASSWORD || '',
    DB_DATABASE: process.env.DB_DATABASE || '',
  },
  namespace: process.env.NAMESPACE || '',
  environment: process.env.ENV || '',
});
// sonarignore:start
new common_1.LambdaStack(app, 'lambda', {
 // sonarignore:end
  s3Bucket: process.env.S3_BUCKET,
  codePath: __dirname,
  handler: 'lambda.handler',
  runtime: 'nodejs18.x',
  layerPath: (0, path_1.resolve)(__dirname, '../layers'),
  vpcConfig: {
    securityGroupIds: getSecurityGroup(),
    subnetIds: getSubnetIds(),
  },
  memorySize: 256,
  timeout: 30,
  customDomainName: {
    domainName: process.env.DOMAIN_NAME || '',
    hostedZoneId: process.env.HOSTED_ZONE_ID || '',
  },
  namespace: process.env.NAMESPACE || '',
  environment: process.env.ENV || '',
  createRole: {
    iamPolicy: JSON.stringify({
      Version: '2012-10-17',
      Statement: [
        {
          Effect: 'Allow',
          Action: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:PutLogEvents',
            'ec2:CreateNetworkInterface',
            'ec2:DescribeNetworkInterfaces',
            'ec2:DeleteNetworkInterface',
            'ec2:AssignPrivateIpAddresses',
            'ec2:UnassignPrivateIpAddresses',
            'secretsmanager:GetSecretValue',
          ],
          Resource: '*',
        },
      ],
    }),
    iamRole: JSON.stringify({
      Version: '2012-10-17',
      Statement: [
        {
          Action: 'sts:AssumeRole',
          Principal: {
            Service: 'lambda.amazonaws.com',
          },
          Effect: 'Allow',
          Sid: '',
        },
      ],
    }),
  },
  useImage: true,
});
// sonarignore:start
new common_1.RedisStack(app, 'redis', {
 // sonarignore:end
  namespace: process.env.NAMESPACE || '',
  environment: process.env.ENV || '',
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBMEI7QUFDMUIsaUNBQWlDO0FBQ2pDLDZDQUE2QztBQUM3QywrQkFBNkI7QUFDN0IscUNBQWlFO0FBRWpFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoQixTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2IsTUFBTSxFQUFFLGNBQWM7SUFDdEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDLENBQUM7QUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQUcsRUFBRSxDQUFDO0FBRXRCLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTs7SUFDeEIsSUFBSTtRQUNGLE1BQU0sU0FBUyxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRywwQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM5QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7S0FDN0I7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFOztJQUM1QixJQUFJO1FBQ0YsTUFBTSxhQUFhLEdBQUcsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxHQUFHLDBDQUFFLGVBQWUsS0FBSSxFQUFFLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2xDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtLQUM3QjtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBRUYsSUFBSSx1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QUUsT0FBTyxFQUFFO0lBQzNCLFVBQVU7SUFDVixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksRUFBRTtJQUN0QyxXQUFXLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtDQUNuQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FwcH0gZnJvbSAnY2RrdGYnO1xuaW1wb3J0ICogYXMgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgKiBhcyBkb3RlbnZFeHQgZnJvbSAnZG90ZW52LWV4dGVuZGVkJztcbmltcG9ydCB7cmVzb2x2ZX0gZnJvbSAncGF0aCc7XG5pbXBvcnQge0xhbWJkYVN0YWNrLCBNaWdyYXRpb25TdGFjaywgUmVkaXNTdGFja30gZnJvbSAnLi9jb21tb24nO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5kb3RlbnZFeHQubG9hZCh7XG4gIHNjaGVtYTogJy5lbnYuZXhhbXBsZScsXG4gIGVycm9yT25NaXNzaW5nOiB0cnVlLFxuICBpbmNsdWRlUHJvY2Vzc0VudjogdHJ1ZSxcbn0pO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbmNvbnN0IGdldFN1Ym5ldElkcyA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdWJuZXRJZHMgPSBwcm9jZXNzLmVudj8uU1VCTkVUX0lEUyB8fCAnJztcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdWJuZXRJZHMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTsgLy8gTk9TT05BUlxuICB9XG4gIHJldHVybiBbXTtcbn07XG5cbmNvbnN0IGdldFNlY3VyaXR5R3JvdXAgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2VjdXJpdHlHcm91cCA9IHByb2Nlc3MuZW52Py5TRUNVUklUWV9HUk9VUFMgfHwgJyc7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc2VjdXJpdHlHcm91cCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpOyAvLyBOT1NPTkFSXG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcblxubmV3IE1pZ3JhdGlvblN0YWNrKGFwcCwgJ21pZ3JhdGlvbicsIHtcbiAgLy8gTk9TT05BUlxuICBjb2RlUGF0aDogcmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9taWdyYXRpb24nKSxcbiAgaGFuZGxlcjogJ2xhbWJkYS5oYW5kbGVyJyxcbiAgcnVudGltZTogJ25vZGVqczE4LngnLFxuICB2cGNDb25maWc6IHtcbiAgICBzZWN1cml0eUdyb3VwSWRzOiBnZXRTZWN1cml0eUdyb3VwKCksXG4gICAgc3VibmV0SWRzOiBnZXRTdWJuZXRJZHMoKSxcbiAgfSxcbiAgbWVtb3J5U2l6ZTogMjU2LFxuICBpbnZvY2F0aW9uRGF0YTogJ3t9JyxcbiAgdGltZW91dDogNjAsXG4gIGVudlZhcnM6IHtcbiAgICBEQl9IT1NUOiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8ICcnLFxuICAgIERCX1BPUlQ6IHByb2Nlc3MuZW52LkRCX1BPUlQgfHwgJycsXG4gICAgREJfVVNFUjogcHJvY2Vzcy5lbnYuREJfVVNFUiB8fCAnJyxcbiAgICBEQl9QQVNTV09SRDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJycsXG4gICAgREJfREFUQUJBU0U6IHByb2Nlc3MuZW52LkRCX0RBVEFCQVNFIHx8ICcnLFxuICB9LFxuICBuYW1lc3BhY2U6IHByb2Nlc3MuZW52Lk5BTUVTUEFDRSB8fCAnJyxcbiAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkVOViB8fCAnJyxcbn0pO1xuXG5uZXcgTGFtYmRhU3RhY2soYXBwLCAnbGFtYmRhJywge1xuICAvLyBOT1NPTkFSXG4gIHMzQnVja2V0OiBwcm9jZXNzLmVudi5TM19CVUNLRVQhLFxuICBjb2RlUGF0aDogX19kaXJuYW1lLFxuICBoYW5kbGVyOiAnbGFtYmRhLmhhbmRsZXInLFxuICBydW50aW1lOiAnbm9kZWpzMTgueCcsXG4gIGxheWVyUGF0aDogcmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9sYXllcnMnKSxcbiAgdnBjQ29uZmlnOiB7XG4gICAgc2VjdXJpdHlHcm91cElkczogZ2V0U2VjdXJpdHlHcm91cCgpLFxuICAgIHN1Ym5ldElkczogZ2V0U3VibmV0SWRzKCksXG4gIH0sXG4gIG1lbW9yeVNpemU6IDI1NixcbiAgdGltZW91dDogMzAsXG4gIGN1c3RvbURvbWFpbk5hbWU6IHtcbiAgICBkb21haW5OYW1lOiBwcm9jZXNzLmVudi5ET01BSU5fTkFNRSB8fCAnJyxcbiAgICBob3N0ZWRab25lSWQ6IHByb2Nlc3MuZW52LkhPU1RFRF9aT05FX0lEIHx8ICcnLFxuICB9LFxuICBuYW1lc3BhY2U6IHByb2Nlc3MuZW52Lk5BTUVTUEFDRSB8fCAnJyxcbiAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkVOViB8fCAnJyxcbiAgY3JlYXRlUm9sZToge1xuICAgIGlhbVBvbGljeTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgQWN0aW9uOiBbXG4gICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dHcm91cCcsXG4gICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dTdHJlYW0nLFxuICAgICAgICAgICAgJ2xvZ3M6UHV0TG9nRXZlbnRzJyxcbiAgICAgICAgICAgICdlYzI6Q3JlYXRlTmV0d29ya0ludGVyZmFjZScsXG4gICAgICAgICAgICAnZWMyOkRlc2NyaWJlTmV0d29ya0ludGVyZmFjZXMnLFxuICAgICAgICAgICAgJ2VjMjpEZWxldGVOZXR3b3JrSW50ZXJmYWNlJyxcbiAgICAgICAgICAgICdlYzI6QXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzJyxcbiAgICAgICAgICAgICdlYzI6VW5hc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXMnLFxuICAgICAgICAgICAgJ3NlY3JldHNtYW5hZ2VyOkdldFNlY3JldFZhbHVlJyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFJlc291cmNlOiAnKicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLFxuICAgIGlhbVJvbGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIFZlcnNpb246ICcyMDEyLTEwLTE3JyxcbiAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICB7XG4gICAgICAgICAgQWN0aW9uOiAnc3RzOkFzc3VtZVJvbGUnLFxuICAgICAgICAgIFByaW5jaXBhbDoge1xuICAgICAgICAgICAgU2VydmljZTogJ2xhbWJkYS5hbWF6b25hd3MuY29tJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICBTaWQ6ICcnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSxcbiAgfSxcbiAgdXNlSW1hZ2U6IHRydWUsXG59KTtcblxubmV3IFJlZGlzU3RhY2soYXBwLCAncmVkaXMnLCB7XG4gIC8vIE5PU09OQVJcbiAgbmFtZXNwYWNlOiBwcm9jZXNzLmVudi5OQU1FU1BBQ0UgfHwgJycsXG4gIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5FTlYgfHwgJycsXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=

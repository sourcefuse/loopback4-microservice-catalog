'use strict';
Object.defineProperty(exports, '__esModule', {value: true});
exports.Redis = void 0;
// generated by cdktf get
// cloudposse/elasticache-redis/aws
const cdktf_1 = require('cdktf');
class Redis extends cdktf_1.TerraformModule {
  constructor(scope, id, config) {
    super(scope, id, {
      ...config,
      source: 'cloudposse/elasticache-redis/aws',
    });
    this.inputs = {};
    this.additionalSecurityGroupRules = config.additionalSecurityGroupRules;
    this.additionalTagMap = config.additionalTagMap;
    this.alarmActions = config.alarmActions;
    this.alarmCpuThresholdPercent = config.alarmCpuThresholdPercent;
    this.alarmMemoryThresholdBytes = config.alarmMemoryThresholdBytes;
    this.allowAllEgress = config.allowAllEgress;
    this.allowedCidrBlocks = config.allowedCidrBlocks;
    this.allowedSecurityGroupIds = config.allowedSecurityGroupIds;
    this.allowedSecurityGroups = config.allowedSecurityGroups;
    this.applyImmediately = config.applyImmediately;
    this.associatedSecurityGroupIds = config.associatedSecurityGroupIds;
    this.atRestEncryptionEnabled = config.atRestEncryptionEnabled;
    this.attributes = config.attributes;
    this.authToken = config.authToken;
    this.autoMinorVersionUpgrade = config.autoMinorVersionUpgrade;
    this.automaticFailoverEnabled = config.automaticFailoverEnabled;
    this.availabilityZones = config.availabilityZones;
    this.cloudwatchMetricAlarmsEnabled = config.cloudwatchMetricAlarmsEnabled;
    this.clusterModeEnabled = config.clusterModeEnabled;
    this.clusterModeNumNodeGroups = config.clusterModeNumNodeGroups;
    this.clusterModeReplicasPerNodeGroup =
      config.clusterModeReplicasPerNodeGroup;
    this.clusterSize = config.clusterSize;
    this.context = config.context;
    this.createSecurityGroup = config.createSecurityGroup;
    this.dataTieringEnabled = config.dataTieringEnabled;
    this.delimiter = config.delimiter;
    this.description = config.description;
    this.descriptorFormats = config.descriptorFormats;
    this.dnsSubdomain = config.dnsSubdomain;
    this.egressCidrBlocks = config.egressCidrBlocks;
    this.elasticacheSubnetGroupName = config.elasticacheSubnetGroupName;
    this.enabled = config.enabled;
    this.engineVersion = config.engineVersion;
    this.environment = config.environment;
    this.existingSecurityGroups = config.existingSecurityGroups;
    this.family = config.family;
    this.finalSnapshotIdentifier = config.finalSnapshotIdentifier;
    this.idLengthLimit = config.idLengthLimit;
    this.instanceType = config.instanceType;
    this.kmsKeyId = config.kmsKeyId;
    this.labelKeyCase = config.labelKeyCase;
    this.labelOrder = config.labelOrder;
    this.labelValueCase = config.labelValueCase;
    this.labelsAsTags = config.labelsAsTags;
    this.logDeliveryConfiguration = config.logDeliveryConfiguration;
    this.maintenanceWindow = config.maintenanceWindow;
    this.multiAzEnabled = config.multiAzEnabled;
    this.name = config.name;
    this.namespace = config.namespace;
    this.notificationTopicArn = config.notificationTopicArn;
    this.okActions = config.okActions;
    this.parameter = config.parameter;
    this.parameterGroupDescription = config.parameterGroupDescription;
    this.port = config.port;
    this.regexReplaceChars = config.regexReplaceChars;
    this.replicationGroupId = config.replicationGroupId;
    this.securityGroupCreateBeforeDestroy =
      config.securityGroupCreateBeforeDestroy;
    this.securityGroupCreateTimeout = config.securityGroupCreateTimeout;
    this.securityGroupDeleteTimeout = config.securityGroupDeleteTimeout;
    this.securityGroupDescription = config.securityGroupDescription;
    this.securityGroupName = config.securityGroupName;
    this.snapshotArns = config.snapshotArns;
    this.snapshotName = config.snapshotName;
    this.snapshotRetentionLimit = config.snapshotRetentionLimit;
    this.snapshotWindow = config.snapshotWindow;
    this.stage = config.stage;
    this.subnets = config.subnets;
    this.tags = config.tags;
    this.tenant = config.tenant;
    this.transitEncryptionEnabled = config.transitEncryptionEnabled;
    this.useExistingSecurityGroups = config.useExistingSecurityGroups;
    this.userGroupIds = config.userGroupIds;
    this.vpcId = config.vpcId;
    this.zoneId = config.zoneId;
  }
  get additionalSecurityGroupRules() {
    return this.inputs['additional_security_group_rules'];
  }
  set additionalSecurityGroupRules(value) {
    this.inputs['additional_security_group_rules'] = value;
  }
  get additionalTagMap() {
    return this.inputs['additional_tag_map'];
  }
  set additionalTagMap(value) {
    this.inputs['additional_tag_map'] = value;
  }
  get alarmActions() {
    return this.inputs['alarm_actions'];
  }
  set alarmActions(value) {
    this.inputs['alarm_actions'] = value;
  }
  get alarmCpuThresholdPercent() {
    return this.inputs['alarm_cpu_threshold_percent'];
  }
  set alarmCpuThresholdPercent(value) {
    this.inputs['alarm_cpu_threshold_percent'] = value;
  }
  get alarmMemoryThresholdBytes() {
    return this.inputs['alarm_memory_threshold_bytes'];
  }
  set alarmMemoryThresholdBytes(value) {
    this.inputs['alarm_memory_threshold_bytes'] = value;
  }
  get allowAllEgress() {
    return this.inputs['allow_all_egress'];
  }
  set allowAllEgress(value) {
    this.inputs['allow_all_egress'] = value;
  }
  get allowedCidrBlocks() {
    return this.inputs['allowed_cidr_blocks'];
  }
  set allowedCidrBlocks(value) {
    this.inputs['allowed_cidr_blocks'] = value;
  }
  get allowedSecurityGroupIds() {
    return this.inputs['allowed_security_group_ids'];
  }
  set allowedSecurityGroupIds(value) {
    this.inputs['allowed_security_group_ids'] = value;
  }
  get allowedSecurityGroups() {
    return this.inputs['allowed_security_groups'];
  }
  set allowedSecurityGroups(value) {
    this.inputs['allowed_security_groups'] = value;
  }
  get applyImmediately() {
    return this.inputs['apply_immediately'];
  }
  set applyImmediately(value) {
    this.inputs['apply_immediately'] = value;
  }
  get associatedSecurityGroupIds() {
    return this.inputs['associated_security_group_ids'];
  }
  set associatedSecurityGroupIds(value) {
    this.inputs['associated_security_group_ids'] = value;
  }
  get atRestEncryptionEnabled() {
    return this.inputs['at_rest_encryption_enabled'];
  }
  set atRestEncryptionEnabled(value) {
    this.inputs['at_rest_encryption_enabled'] = value;
  }
  get attributes() {
    return this.inputs['attributes'];
  }
  set attributes(value) {
    this.inputs['attributes'] = value;
  }
  get authToken() {
    return this.inputs['auth_token'];
  }
  set authToken(value) {
    this.inputs['auth_token'] = value;
  }
  get autoMinorVersionUpgrade() {
    return this.inputs['auto_minor_version_upgrade'];
  }
  set autoMinorVersionUpgrade(value) {
    this.inputs['auto_minor_version_upgrade'] = value;
  }
  get automaticFailoverEnabled() {
    return this.inputs['automatic_failover_enabled'];
  }
  set automaticFailoverEnabled(value) {
    this.inputs['automatic_failover_enabled'] = value;
  }
  get availabilityZones() {
    return this.inputs['availability_zones'];
  }
  set availabilityZones(value) {
    this.inputs['availability_zones'] = value;
  }
  get cloudwatchMetricAlarmsEnabled() {
    return this.inputs['cloudwatch_metric_alarms_enabled'];
  }
  set cloudwatchMetricAlarmsEnabled(value) {
    this.inputs['cloudwatch_metric_alarms_enabled'] = value;
  }
  get clusterModeEnabled() {
    return this.inputs['cluster_mode_enabled'];
  }
  set clusterModeEnabled(value) {
    this.inputs['cluster_mode_enabled'] = value;
  }
  get clusterModeNumNodeGroups() {
    return this.inputs['cluster_mode_num_node_groups'];
  }
  set clusterModeNumNodeGroups(value) {
    this.inputs['cluster_mode_num_node_groups'] = value;
  }
  get clusterModeReplicasPerNodeGroup() {
    return this.inputs['cluster_mode_replicas_per_node_group'];
  }
  set clusterModeReplicasPerNodeGroup(value) {
    this.inputs['cluster_mode_replicas_per_node_group'] = value;
  }
  get clusterSize() {
    return this.inputs['cluster_size'];
  }
  set clusterSize(value) {
    this.inputs['cluster_size'] = value;
  }
  get context() {
    return this.inputs['context'];
  }
  set context(value) {
    this.inputs['context'] = value;
  }
  get createSecurityGroup() {
    return this.inputs['create_security_group'];
  }
  set createSecurityGroup(value) {
    this.inputs['create_security_group'] = value;
  }
  get dataTieringEnabled() {
    return this.inputs['data_tiering_enabled'];
  }
  set dataTieringEnabled(value) {
    this.inputs['data_tiering_enabled'] = value;
  }
  get delimiter() {
    return this.inputs['delimiter'];
  }
  set delimiter(value) {
    this.inputs['delimiter'] = value;
  }
  get description() {
    return this.inputs['description'];
  }
  set description(value) {
    this.inputs['description'] = value;
  }
  get descriptorFormats() {
    return this.inputs['descriptor_formats'];
  }
  set descriptorFormats(value) {
    this.inputs['descriptor_formats'] = value;
  }
  get dnsSubdomain() {
    return this.inputs['dns_subdomain'];
  }
  set dnsSubdomain(value) {
    this.inputs['dns_subdomain'] = value;
  }
  get egressCidrBlocks() {
    return this.inputs['egress_cidr_blocks'];
  }
  set egressCidrBlocks(value) {
    this.inputs['egress_cidr_blocks'] = value;
  }
  get elasticacheSubnetGroupName() {
    return this.inputs['elasticache_subnet_group_name'];
  }
  set elasticacheSubnetGroupName(value) {
    this.inputs['elasticache_subnet_group_name'] = value;
  }
  get enabled() {
    return this.inputs['enabled'];
  }
  set enabled(value) {
    this.inputs['enabled'] = value;
  }
  get engineVersion() {
    return this.inputs['engine_version'];
  }
  set engineVersion(value) {
    this.inputs['engine_version'] = value;
  }
  get environment() {
    return this.inputs['environment'];
  }
  set environment(value) {
    this.inputs['environment'] = value;
  }
  get existingSecurityGroups() {
    return this.inputs['existing_security_groups'];
  }
  set existingSecurityGroups(value) {
    this.inputs['existing_security_groups'] = value;
  }
  get family() {
    return this.inputs['family'];
  }
  set family(value) {
    this.inputs['family'] = value;
  }
  get finalSnapshotIdentifier() {
    return this.inputs['final_snapshot_identifier'];
  }
  set finalSnapshotIdentifier(value) {
    this.inputs['final_snapshot_identifier'] = value;
  }
  get idLengthLimit() {
    return this.inputs['id_length_limit'];
  }
  set idLengthLimit(value) {
    this.inputs['id_length_limit'] = value;
  }
  get instanceType() {
    return this.inputs['instance_type'];
  }
  set instanceType(value) {
    this.inputs['instance_type'] = value;
  }
  get kmsKeyId() {
    return this.inputs['kms_key_id'];
  }
  set kmsKeyId(value) {
    this.inputs['kms_key_id'] = value;
  }
  get labelKeyCase() {
    return this.inputs['label_key_case'];
  }
  set labelKeyCase(value) {
    this.inputs['label_key_case'] = value;
  }
  get labelOrder() {
    return this.inputs['label_order'];
  }
  set labelOrder(value) {
    this.inputs['label_order'] = value;
  }
  get labelValueCase() {
    return this.inputs['label_value_case'];
  }
  set labelValueCase(value) {
    this.inputs['label_value_case'] = value;
  }
  get labelsAsTags() {
    return this.inputs['labels_as_tags'];
  }
  set labelsAsTags(value) {
    this.inputs['labels_as_tags'] = value;
  }
  get logDeliveryConfiguration() {
    return this.inputs['log_delivery_configuration'];
  }
  set logDeliveryConfiguration(value) {
    this.inputs['log_delivery_configuration'] = value;
  }
  get maintenanceWindow() {
    return this.inputs['maintenance_window'];
  }
  set maintenanceWindow(value) {
    this.inputs['maintenance_window'] = value;
  }
  get multiAzEnabled() {
    return this.inputs['multi_az_enabled'];
  }
  set multiAzEnabled(value) {
    this.inputs['multi_az_enabled'] = value;
  }
  get name() {
    return this.inputs['name'];
  }
  set name(value) {
    this.inputs['name'] = value;
  }
  get namespace() {
    return this.inputs['namespace'];
  }
  set namespace(value) {
    this.inputs['namespace'] = value;
  }
  get notificationTopicArn() {
    return this.inputs['notification_topic_arn'];
  }
  set notificationTopicArn(value) {
    this.inputs['notification_topic_arn'] = value;
  }
  get okActions() {
    return this.inputs['ok_actions'];
  }
  set okActions(value) {
    this.inputs['ok_actions'] = value;
  }
  get parameter() {
    return this.inputs['parameter'];
  }
  set parameter(value) {
    this.inputs['parameter'] = value;
  }
  get parameterGroupDescription() {
    return this.inputs['parameter_group_description'];
  }
  set parameterGroupDescription(value) {
    this.inputs['parameter_group_description'] = value;
  }
  get port() {
    return this.inputs['port'];
  }
  set port(value) {
    this.inputs['port'] = value;
  }
  get regexReplaceChars() {
    return this.inputs['regex_replace_chars'];
  }
  set regexReplaceChars(value) {
    this.inputs['regex_replace_chars'] = value;
  }
  get replicationGroupId() {
    return this.inputs['replication_group_id'];
  }
  set replicationGroupId(value) {
    this.inputs['replication_group_id'] = value;
  }
  get securityGroupCreateBeforeDestroy() {
    return this.inputs['security_group_create_before_destroy'];
  }
  set securityGroupCreateBeforeDestroy(value) {
    this.inputs['security_group_create_before_destroy'] = value;
  }
  get securityGroupCreateTimeout() {
    return this.inputs['security_group_create_timeout'];
  }
  set securityGroupCreateTimeout(value) {
    this.inputs['security_group_create_timeout'] = value;
  }
  get securityGroupDeleteTimeout() {
    return this.inputs['security_group_delete_timeout'];
  }
  set securityGroupDeleteTimeout(value) {
    this.inputs['security_group_delete_timeout'] = value;
  }
  get securityGroupDescription() {
    return this.inputs['security_group_description'];
  }
  set securityGroupDescription(value) {
    this.inputs['security_group_description'] = value;
  }
  get securityGroupName() {
    return this.inputs['security_group_name'];
  }
  set securityGroupName(value) {
    this.inputs['security_group_name'] = value;
  }
  get snapshotArns() {
    return this.inputs['snapshot_arns'];
  }
  set snapshotArns(value) {
    this.inputs['snapshot_arns'] = value;
  }
  get snapshotName() {
    return this.inputs['snapshot_name'];
  }
  set snapshotName(value) {
    this.inputs['snapshot_name'] = value;
  }
  get snapshotRetentionLimit() {
    return this.inputs['snapshot_retention_limit'];
  }
  set snapshotRetentionLimit(value) {
    this.inputs['snapshot_retention_limit'] = value;
  }
  get snapshotWindow() {
    return this.inputs['snapshot_window'];
  }
  set snapshotWindow(value) {
    this.inputs['snapshot_window'] = value;
  }
  get stage() {
    return this.inputs['stage'];
  }
  set stage(value) {
    this.inputs['stage'] = value;
  }
  get subnets() {
    return this.inputs['subnets'];
  }
  set subnets(value) {
    this.inputs['subnets'] = value;
  }
  get tags() {
    return this.inputs['tags'];
  }
  set tags(value) {
    this.inputs['tags'] = value;
  }
  get tenant() {
    return this.inputs['tenant'];
  }
  set tenant(value) {
    this.inputs['tenant'] = value;
  }
  get transitEncryptionEnabled() {
    return this.inputs['transit_encryption_enabled'];
  }
  set transitEncryptionEnabled(value) {
    this.inputs['transit_encryption_enabled'] = value;
  }
  get useExistingSecurityGroups() {
    return this.inputs['use_existing_security_groups'];
  }
  set useExistingSecurityGroups(value) {
    this.inputs['use_existing_security_groups'] = value;
  }
  get userGroupIds() {
    return this.inputs['user_group_ids'];
  }
  set userGroupIds(value) {
    this.inputs['user_group_ids'] = value;
  }
  get vpcId() {
    return this.inputs['vpc_id'];
  }
  set vpcId(value) {
    this.inputs['vpc_id'] = value;
  }
  get zoneId() {
    return this.inputs['zone_id'];
  }
  set zoneId(value) {
    this.inputs['zone_id'] = value;
  }
  get arnOutput() {
    return this.getString('arn');
  }
  get clusterEnabledOutput() {
    return this.getString('cluster_enabled');
  }
  get endpointOutput() {
    return this.getString('endpoint');
  }
  get engineVersionActualOutput() {
    return this.getString('engine_version_actual');
  }
  get hostOutput() {
    return this.getString('host');
  }
  get idOutput() {
    return this.getString('id');
  }
  get memberClustersOutput() {
    return this.getString('member_clusters');
  }
  get portOutput() {
    return this.getString('port');
  }
  get readerEndpointAddressOutput() {
    return this.getString('reader_endpoint_address');
  }
  get securityGroupIdOutput() {
    return this.getString('security_group_id');
  }
  get securityGroupNameOutput() {
    return this.getString('security_group_name');
  }
  synthesizeAttributes() {
    return this.inputs;
  }
}
exports.Redis = Redis;
//# sourceMappingURL=data:application/json;base64,

'use strict';
Object.defineProperty(exports, '__esModule', {value: true});
const cdktf_1 = require('cdktf');
const dotenv = require('dotenv');
const dotenvExt = require('dotenv-extended');
const path_1 = require('path');
const common_1 = require('./common');
dotenv.config();
dotenvExt.load({
  schema: '.env.example',
  errorOnMissing: true,
  includeProcessEnv: true,
});
const app = new cdktf_1.App();
const getSubnetIds = () => {
  let _a;
  try {
    const subnetIds =
      ((_a = process.env) === null || _a === void 0 ? void 0 : _a.SUBNET_IDS) ||
      '';
    return JSON.parse(subnetIds);
  } catch (e) {
    console.error(e); // NOSONAR
  }
  return [];
};
const getSecurityGroup = () => {
  let _a;
  try {
    const securityGroup =
      ((_a = process.env) === null || _a === void 0
        ? void 0
        : _a.SECURITY_GROUPS) || '';
    return JSON.parse(securityGroup);
  } catch (e) {
    console.error(e); // NOSONAR
  }
  return [];
};
// sonarignore:start
new common_1.MigrationStack(app, 'migration', {
  // sonarignore:end
  codePath: (0, path_1.resolve)(__dirname, '../migration'),
  handler: 'lambda.handler',
  runtime: 'nodejs18.x',
  vpcConfig: {
    securityGroupIds: getSecurityGroup(),
    subnetIds: getSubnetIds(),
  },
  memorySize: 256,
  invocationData: '{}',
  timeout: 60,
  envVars: {
    DB_HOST: process.env.DB_HOST || '',
    DB_PORT: process.env.DB_PORT || '',
    DB_USER: process.env.DB_USER || '',
    DB_PASSWORD: process.env.DB_PASSWORD || '',
    DB_DATABASE: process.env.DB_DATABASE || '',
  },
  namespace: process.env.NAMESPACE || '',
  environment: process.env.ENV || '',
});
// sonarignore:start
new common_1.LambdaStack(app, 'lambda', {
  // sonarignore:end
  s3Bucket: process.env.S3_BUCKET,
  codePath: __dirname,
  handler: 'lambda.handler',
  runtime: 'nodejs18.x',
  layerPath: (0, path_1.resolve)(__dirname, '../layers'),
  vpcConfig: {
    securityGroupIds: getSecurityGroup(),
    subnetIds: getSubnetIds(),
  },
  memorySize: 256,
  timeout: 30,
  customDomainName: {
    domainName: process.env.DOMAIN_NAME || '',
    hostedZoneId: process.env.HOSTED_ZONE_ID || '',
  },
  namespace: process.env.NAMESPACE || '',
  environment: process.env.ENV || '',
  createRole: {
    iamPolicy: JSON.stringify({
      Version: '2012-10-17',
      Statement: [
        {
          Effect: 'Allow',
          Action: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:PutLogEvents',
            'ec2:CreateNetworkInterface',
            'ec2:DescribeNetworkInterfaces',
            'ec2:DeleteNetworkInterface',
            'ec2:AssignPrivateIpAddresses',
            'ec2:UnassignPrivateIpAddresses',
            'secretsmanager:GetSecretValue',
          ],
          Resource: '*',
        },
      ],
    }),
    iamRole: JSON.stringify({
      Version: '2012-10-17',
      Statement: [
        {
          Action: 'sts:AssumeRole',
          Principal: {
            Service: 'lambda.amazonaws.com',
          },
          Effect: 'Allow',
          Sid: '',
        },
      ],
    }),
  },
  useImage: true,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBMEI7QUFDMUIsaUNBQWlDO0FBQ2pDLDZDQUE2QztBQUM3QywrQkFBNkI7QUFDN0IscUNBQXFEO0FBRXJELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoQixTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2IsTUFBTSxFQUFFLGNBQWM7SUFDdEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDLENBQUM7QUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQUcsRUFBRSxDQUFDO0FBRXRCLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTs7SUFDeEIsSUFBSTtRQUNGLE1BQU0sU0FBUyxHQUFHLENBQUEsTUFBQSxPQUFPLENBQUMsR0FBRywwQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM5QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7S0FDN0I7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxFQUFFOztJQUM1QixJQUFJO1FBQ0YsTUFBTSxhQUFhLEdBQUcsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxHQUFHLDBDQUFFLGVBQWUsS0FBSSxFQUFFLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ2xDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtLQUM3QjtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBQ0Ysb0JBQW9C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QUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcHB9IGZyb20gJ2Nka3RmJztcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0ICogYXMgZG90ZW52RXh0IGZyb20gJ2RvdGVudi1leHRlbmRlZCc7XG5pbXBvcnQge3Jlc29sdmV9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtMYW1iZGFTdGFjaywgTWlncmF0aW9uU3RhY2t9IGZyb20gJy4vY29tbW9uJztcblxuZG90ZW52LmNvbmZpZygpO1xuZG90ZW52RXh0LmxvYWQoe1xuICBzY2hlbWE6ICcuZW52LmV4YW1wbGUnLFxuICBlcnJvck9uTWlzc2luZzogdHJ1ZSxcbiAgaW5jbHVkZVByb2Nlc3NFbnY6IHRydWUsXG59KTtcblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5jb25zdCBnZXRTdWJuZXRJZHMgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3VibmV0SWRzID0gcHJvY2Vzcy5lbnY/LlNVQk5FVF9JRFMgfHwgJyc7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3VibmV0SWRzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7IC8vIE5PU09OQVJcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5jb25zdCBnZXRTZWN1cml0eUdyb3VwID0gKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHNlY3VyaXR5R3JvdXAgPSBwcm9jZXNzLmVudj8uU0VDVVJJVFlfR1JPVVBTIHx8ICcnO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNlY3VyaXR5R3JvdXApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTsgLy8gTk9TT05BUlxuICB9XG4gIHJldHVybiBbXTtcbn07XG4vLyBzb25hcmlnbm9yZTpzdGFydFxubmV3IE1pZ3JhdGlvblN0YWNrKGFwcCwgJ21pZ3JhdGlvbicsIHtcbiAgLy8gc29uYXJpZ25vcmU6ZW5kXG4gIGNvZGVQYXRoOiByZXNvbHZlKF9fZGlybmFtZSwgJy4uL21pZ3JhdGlvbicpLFxuICBoYW5kbGVyOiAnbGFtYmRhLmhhbmRsZXInLFxuICBydW50aW1lOiAnbm9kZWpzMTgueCcsXG4gIHZwY0NvbmZpZzoge1xuICAgIHNlY3VyaXR5R3JvdXBJZHM6IGdldFNlY3VyaXR5R3JvdXAoKSxcbiAgICBzdWJuZXRJZHM6IGdldFN1Ym5ldElkcygpLFxuICB9LFxuICBtZW1vcnlTaXplOiAyNTYsXG4gIGludm9jYXRpb25EYXRhOiAne30nLFxuICB0aW1lb3V0OiA2MCxcbiAgZW52VmFyczoge1xuICAgIERCX0hPU1Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJycsXG4gICAgREJfUE9SVDogcHJvY2Vzcy5lbnYuREJfUE9SVCB8fCAnJyxcbiAgICBEQl9VU0VSOiBwcm9jZXNzLmVudi5EQl9VU0VSIHx8ICcnLFxuICAgIERCX1BBU1NXT1JEOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnJyxcbiAgICBEQl9EQVRBQkFTRTogcHJvY2Vzcy5lbnYuREJfREFUQUJBU0UgfHwgJycsXG4gIH0sXG4gIG5hbWVzcGFjZTogcHJvY2Vzcy5lbnYuTkFNRVNQQUNFIHx8ICcnLFxuICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuRU5WIHx8ICcnLFxufSk7XG4vLyBzb25hcmlnbm9yZTpzdGFydFxubmV3IExhbWJkYVN0YWNrKGFwcCwgJ2xhbWJkYScsIHtcbiAgLy8gc29uYXJpZ25vcmU6ZW5kXG4gIHMzQnVja2V0OiBwcm9jZXNzLmVudi5TM19CVUNLRVQhLFxuICBjb2RlUGF0aDogX19kaXJuYW1lLFxuICBoYW5kbGVyOiAnbGFtYmRhLmhhbmRsZXInLFxuICBydW50aW1lOiAnbm9kZWpzMTgueCcsXG4gIGxheWVyUGF0aDogcmVzb2x2ZShfX2Rpcm5hbWUsICcuLi9sYXllcnMnKSxcbiAgdnBjQ29uZmlnOiB7XG4gICAgc2VjdXJpdHlHcm91cElkczogZ2V0U2VjdXJpdHlHcm91cCgpLFxuICAgIHN1Ym5ldElkczogZ2V0U3VibmV0SWRzKCksXG4gIH0sXG4gIG1lbW9yeVNpemU6IDI1NixcbiAgdGltZW91dDogMzAsXG4gIGN1c3RvbURvbWFpbk5hbWU6IHtcbiAgICBkb21haW5OYW1lOiBwcm9jZXNzLmVudi5ET01BSU5fTkFNRSB8fCAnJyxcbiAgICBob3N0ZWRab25lSWQ6IHByb2Nlc3MuZW52LkhPU1RFRF9aT05FX0lEIHx8ICcnLFxuICB9LFxuICBuYW1lc3BhY2U6IHByb2Nlc3MuZW52Lk5BTUVTUEFDRSB8fCAnJyxcbiAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52LkVOViB8fCAnJyxcbiAgY3JlYXRlUm9sZToge1xuICAgIGlhbVBvbGljeTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgU3RhdGVtZW50OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgQWN0aW9uOiBbXG4gICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dHcm91cCcsXG4gICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dTdHJlYW0nLFxuICAgICAgICAgICAgJ2xvZ3M6UHV0TG9nRXZlbnRzJyxcbiAgICAgICAgICAgICdlYzI6Q3JlYXRlTmV0d29ya0ludGVyZmFjZScsXG4gICAgICAgICAgICAnZWMyOkRlc2NyaWJlTmV0d29ya0ludGVyZmFjZXMnLFxuICAgICAgICAgICAgJ2VjMjpEZWxldGVOZXR3b3JrSW50ZXJmYWNlJyxcbiAgICAgICAgICAgICdlYzI6QXNzaWduUHJpdmF0ZUlwQWRkcmVzc2VzJyxcbiAgICAgICAgICAgICdlYzI6VW5hc3NpZ25Qcml2YXRlSXBBZGRyZXNzZXMnLFxuICAgICAgICAgICAgJ3NlY3JldHNtYW5hZ2VyOkdldFNlY3JldFZhbHVlJyxcbiAgICAgICAgICBdLFxuICAgICAgICAgIFJlc291cmNlOiAnKicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLFxuICAgIGlhbVJvbGU6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIFZlcnNpb246ICcyMDEyLTEwLTE3JyxcbiAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICB7XG4gICAgICAgICAgQWN0aW9uOiAnc3RzOkFzc3VtZVJvbGUnLFxuICAgICAgICAgIFByaW5jaXBhbDoge1xuICAgICAgICAgICAgU2VydmljZTogJ2xhbWJkYS5hbWF6b25hd3MuY29tJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgICBTaWQ6ICcnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSxcbiAgfSxcbiAgdXNlSW1hZ2U6IHRydWUsXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=
